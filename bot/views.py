
__author__ = '@Alexey_Horbunov'
from ast import parse
from django.db.models import Sum
from django.db.utils import IntegrityError
from requests.models import parse_header_links
from bot.utils import numbers_emojify
from django.shortcuts import render
from rest_framework.response import Response
from rest_framework.views import APIView
from collections import defaultdict
import telebot
import re
import os
import datetime
from .models import User
# from .config import TOKEN, PROVIDER_TOKEN
from telebot.types import LabeledPrice, Message, ShippingOption
from fuzzywuzzy import fuzz
import random

TOKEN = os.getenv('TOKEN')
PROVIDER_TOKEN = os.getenv('PROVIDER_TOKEN')

bot = telebot.TeleBot(TOKEN)


class UpdateBot(APIView):

    def post(self, request):
        json_string = request.body.decode('UTF-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])

        return Response({'code': 200})


keyboard_1 = telebot.types.ReplyKeyboardMarkup(True, False, row_width=1)
keyboard_1.row('üí†üî• –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å üî•üí†')
keyboard_1.row('ü§ëüí≤ –ú–æ–π —Å—á–µ—Ç üí≤ü§ë', 'üè¶ –û–±—â–∏–π –±–∞–Ω–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è üè¶')
keyboard_1.row('üé≥ –ú–æ–∏ –æ—á–∫–∏ üé≥')
keyboard_1.row('üï∞üí£ –°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à üí£üï∞')

minigame_keyboard = telebot.types.ReplyKeyboardMarkup(
    True, False, row_width=1)
minigame_keyboard.row('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É')


DEFAULT, MINIGAMESTART, MINIGAMEFINAL, GOTOSET, FINAL = range(5)

USER_STATE = defaultdict(lambda: DEFAULT)


def get_state(message):
    return USER_STATE[message.chat.id]


def update_state(message, state):
    USER_STATE[message.chat.id] = state


@bot.message_handler(commands=['start'])
def message_start(message):
    text = 'ü§ñ' + message.from_user.first_name + ', –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å üíé<b>Crystal Cashüíé!</b> \n' +\
        'üíµ–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É üî•.\n\n' +\
        'üí†–°—É—Ç—å –ø—Ä–æ—Å—Ç–∞: –≤—ã –≤–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –æ–±—â–∏–π –±–∞–Ω–∫ üí∂, –∫–∞–∫ –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –†–∞–∑ –≤ –¥–µ–Ω—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –±–∞–Ω–∫–∞ –∏ –∏–º–µ–Ω–Ω–æ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –≤–µ—Å—å –∫—É—à üí∞\n\n' +\
        'üçë–¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —Å–µ–≥–æ–¥–Ω—è –≤—ã –≤–ª–æ–∂–∏—Ç–µ –ø–∞—Ä—É –¥–æ–ª–ª–∞—Ä–æ–≤ –∏ —É–∂–µ –∑–∞–≤—Ç—Ä–∞ —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –≤ –¥–µ—Å—è—Ç–∫–∏ —Ä–∞–∑ –±–æ–ª—å—à–µ!üí£\n\n' +\
        '‚úÖ–î–µ—Ä–∑–∞–π—Ç–µ!‚úÖ\n\n' +\
        '‚ÑπÔ∏è<i>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –∫–æ–º–∞–Ω–¥—É /help</i>‚ÑπÔ∏è\n\n' +\
        '‚öúÔ∏è–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ üíéCrystal Cashüíé‚öúÔ∏è'

    bot.send_message(message.chat.id, text,
                     reply_markup=keyboard_1, parse_mode='HTML')
    try:
        user = User()
        user.user_id = message.chat.id
        user.name = message.from_user.first_name
        user.state_now = 'DEFAULT'
        user.save()
    except IntegrityError:
        pass


@bot.message_handler(commands=['help'])
def message_help(message):
    # markup_author.add(item_author)
    help_text = 'üíé<b> –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –í–∞–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–≥—Ä—ã </b>üíé \n\n' + \
        'üéØ–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º üè¶–ë–∞–Ω–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.  –†–∞–∑–º–µ—Ä üè¶ –ë–∞–Ω–∫–∞ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è –¥–æ –º–æ–º–µ–Ω—Ç–∞ –µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ üï∞ 18:00 üï∞ ( –ö–∏–µ–≤ )\n\n' + \
        '–í—Ç–æ—Ä–∞—è –∏–≥—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –ª–æ—Ç–µ—Ä–µ–µ–π –≤ –∫–æ—Ç–æ—Ä–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ —á–∏—Å–µ–ª –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à —Å—Ä–µ–¥—Å—Ç–≤ üí∞ \n' + \
        'üéØ–¢—É—Ç –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –æ—á–∫–∏ üîÆ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ üíµ –æ–ø–ª–∞—Ç—ã üí∞ —á–∞—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –í–∞–º –¥–∞–µ—Ç—Å—è —Å–µ—Ç–∫–∞ –∏–∑ üî¢ —á–∏—Å–µ–ª –∏ –í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–±—Ä–∞—Ç—å –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —á–∞—Å—Ç–µ–π –æ–¥–Ω–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ . –ù–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ–Ω–æ –±—É–¥–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º –Ω–∞–º–∏ - —Å—Ç–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –í—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ üéä(–æ—Ç 0 –¥–æ 100).  üï∞ –°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –º–æ–∂–Ω–æ 3 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏ üï∞\n\n' + \
        '<i> üçÄ –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∂–µ–ª–∞–µ—Ç –í–∞–º —É–¥–∞—á–∏ üçÄ </i>'
    bot.send_message(
        message.chat.id, help_text, reply_markup=keyboard_1, parse_mode='HTML')


@bot.message_handler(content_types=['text'], func=lambda message: get_state(message) == DEFAULT)
def answer_for_text(message):
    if '–Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å' in message.text.lower():
        send_money_keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
        send_money_button = telebot.types.InlineKeyboardButton(
            'üîÆüíµüíé–í–æ—Ä–≤–∞—Ç—å—Å—è –≤ –∏–≥—Ä—ÉüíéüíµüîÆ', callback_data='send_money')
        play_minigame_button = telebot.types.InlineKeyboardButton(
            '–ò–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—É', callback_data='play_minigame')
        send_money_keyboard.add(send_money_button)
        send_money_keyboard.add(play_minigame_button)
        bot.send_message(message.chat.id, '‚ùáÔ∏è–£–∂–µ —Å–µ–π—á–∞—Å üî∑–ò–ú–ï–ù–ù–û –í–´üî∑  –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –∏ –≤–ª–æ–∂–∏—Ç—å —á–∞—Å—Ç–∏—á–∫—É –≤ –±–∞–Ω–∫ üí∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ—Å–º—è –∑–∞–±—Ä–∞—Ç—å –∏ —Å—Ç–∞—Ç—å –±–æ–≥–∞—á–µ!) üí≤\n\n' +
                         '<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\n' +
                         '–î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.</i>',
                         reply_markup=send_money_keyboard, parse_mode='HTML')

    if '–±–∞–Ω–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è' in message.text.lower():
        sum = User.objects.aggregate(Sum('today_cash'))['today_cash__sum']
        sum_for_user = sum - sum * 0.1
        bot.send_message(message.chat.id,
                         f'üè¶ –ë–∞–Ω–∫ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ {sum_for_user} –≥—Ä–Ω!üè¶ \n –ù–∞–∂–∏–º–∞–π—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å", —á—Ç–æ–±—ã –≤–ª–æ–∂–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ üíé—Ä–æ–∑—ã–≥—Ä—ã—à–µüíé',
                         parse_mode='HTML',
                         reply_markup=keyboard_1
                         )

    if '–º–æ–π —Å—á–µ—Ç' in message.text.lower():
        user = User.objects.get(user_id=message.chat.id)
        user_money = str(user.today_cash)
        bot.send_message(
            message.chat.id, f'üíµ–í—ã –≤–ª–æ–∂–∏–ª–∏ –≤ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É üíé{user_money}üíé –≥—Ä–Ω üíµ', reply_markup=keyboard_1)

    if '–º–æ–∏ –æ—á–∫–∏' in message.text.lower():
        user = User.objects.get(user_id=message.chat.id)
        user_scores = str(user.minigame_points)
        bot.send_message(
            message.chat.id, f'üî¢ –í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å {user_scores} –æ—á–∫–æ–≤ üî¢')

    if '—Å–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à' in message.text.lower():
        bot.send_message(
            message.chat.id, 'üïì–°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –≤ 18:00 –ø–æ –∫–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏üïì', reply_markup=keyboard_1)

# @bot.message_handler(func=lambda message: get_state(message) == GOTOSET)


def message_to_send_money(message):
    bot.send_message(
        message.chat.id, 'üí∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É üí∏ (–¶–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –≥—Ä–∏–≤–Ω–∞—Ö)')
    update_state(message, FINAL)


@bot.message_handler(func=lambda message: get_state(message) == FINAL)
def confirm_sending_money(message):
    amount = int(message.text + '00')
    prices = [LabeledPrice(label='–û–ø–ª–∞—Ç–∞ Crystal Cash', amount=amount)]
    bot.send_invoice(message.chat.id, title='–û–ø–ª–∞—Ç–∞ Crystal Cash',
                     description='‚ú®üåü–û–ø–ª–∞—Ç–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üíµ—Å—Ä–µ–¥—Å—Ç–≤üíµüåü‚ú®',
                     provider_token=PROVIDER_TOKEN,
                     currency='uah',
                     is_flexible=False,  # True If you need to set up Shipping Fee
                     prices=prices,
                     start_parameter='time-machine-example',
                     invoice_payload='Crystal Cash Payment')
    # user = User.objects.get(user_id=message.chat.id)
    # user.today_cash = float(message.text)
    # user.save()
    # bot.send_message(message.chat.id, '–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã')
    update_state(message, DEFAULT)


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    print(pre_checkout_query)
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    paym_amount = message.successful_payment.total_amount / 100
    user = User.objects.get(user_id=message.chat.id)
    user.today_cash = paym_amount
    user.save()
    bot.send_message(message.chat.id,
                     'üí∞–û—Ç–ª–∏—á–Ω–æ, –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!üí∞ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–π–¥–µ—Ç –≤ 18:00 –ø–æ üïß–ö–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ üïß. \n\nüîÆ–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –í–∞—Å —É–≤–µ–¥–æ–º–∏–º!üîÆ',
                     parse_mode='Markdown')

#'–°–ø–∞—Å–∏–±–æ! –ü–ª–∞—Ç–µ–∂ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω'


def list_splitter(lst, size):
    return [lst[i: i+size] for i in range(0, len(lst), size)]


def run_minigame(message):
    user = User.objects.get(user_id=message.chat.id)
    if user.minigame_counter_date != datetime.date.today():
        user.minigame_counter_date = datetime.date.today()
        user.minigame_counter = 0
        user.save()
    if user.minigame_counter < 100000:
        list_of_numbers = [str(i) for i in random.sample(range(10, 99), 16)]
        user.minigame_random_list = '-'.join(list_of_numbers)
        user.minigame_counter = user.minigame_counter + 1
        user.save()
        # print(user.minigame_random_list)
        number_keyboard = telebot.types.InlineKeyboardMarkup(row_width=4)
        for item in list_splitter(list_of_numbers, 4):
            temp = []
            for elem in item:
                temp.append(telebot.types.InlineKeyboardButton(
                    elem, callback_data=f'game_number-{str(elem)}'))
            number_keyboard.add(*temp)

        exit_button = telebot.types.InlineKeyboardButton(
            '‚¨Ö –í—ã–π—Ç–∏', callback_data='exit_minigame')
        number_keyboard.add(exit_button)
        text_start = 'üíé <b>–ü—Ä–∏–≤–µ—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –º–∏–Ω–∏-–∏–≥—Ä–µ</b> üíé \n\n' + \
            'üéØ–¢—É—Ç –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –æ—á–∫–∏ üîÆ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ üíµ –æ–ø–ª–∞—Ç—ã üí∞ —á–∞—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –í–∞–º –¥–∞–µ—Ç—Å—è —Å–µ—Ç–∫–∞ –∏–∑ üî¢ —á–∏—Å–µ–ª –∏ –í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–±—Ä–∞—Ç—å –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —á–∞—Å—Ç–µ–π –æ–¥–Ω–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ . –ù–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ–Ω–æ –±—É–¥–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º –Ω–∞–º–∏ - —Å—Ç–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –í—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ üéä(–æ—Ç 0 –¥–æ 100).\n\n' + \
            'üï∞–°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –º–æ–∂–Ω–æ 3 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏ üï∞\n\n' + \
            '<i>–£–¥–∞—á–∏!</i> üçÄ'
        bot.send_message(message.chat.id, text_start,
                         reply_markup=number_keyboard, parse_mode='HTML')
    else:
        bot.send_message(
            message.chat.id, '‚ùå –í—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è ‚ùå', reply_markup=keyboard_1)
        update_state(message, DEFAULT)


def user_in_game_process(message):
    user = User.objects.get(user_id=message.chat.id)
    list_of_user_numbers = re.findall(r'\d\d', user.minigame_number)
    # print(list_of_user_numbers)
    user_number = user.minigame_random_list.split('-')
    # print(user_number)
    number_keyboard = telebot.types.InlineKeyboardMarkup(row_width=4)
    for item in list_splitter(user_number, 4):
        temp = []
        for elem in item:
            if elem in list_of_user_numbers:
                temp.append(telebot.types.InlineKeyboardButton(
                    str(elem) + '‚úÖ', callback_data=f'game_number-{str(elem)}'))
            else:
                temp.append(telebot.types.InlineKeyboardButton(
                    str(elem) + '', callback_data=f'game_number-{str(elem)}'))
        number_keyboard.add(*temp)
    exit_button = telebot.types.InlineKeyboardButton(
        '‚¨Ö –í—ã–π—Ç–∏', callback_data='exit_minigame')
    number_keyboard.add(exit_button)

    text_start = 'üçÄ #Ô∏è‚É£ <i>–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ</i> #Ô∏è‚É£  üçÄ'
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text=text_start, reply_markup=number_keyboard, parse_mode='HTML')


def minigame_final(message):
    user = User.objects.get(user_id=message.chat.id)
    user_minigame_number = str(user.minigame_number)
    user_minigame_number_to_user = numbers_emojify(user_minigame_number)
    luck_number = str(random.randint(1000000, 99999999))
    luck_number_to_user = numbers_emojify(luck_number)
    coincidence = fuzz.ratio(user_minigame_number, luck_number)
    user.minigame_points = user.minigame_points + coincidence
    user.minigame_random_list = []
    user.minigame_number = ''
    user.save()
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text=f'–í—ã —Å–æ–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ {user_minigame_number_to_user}, –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {luck_number_to_user}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {str(coincidence)} –æ—á–∫–æ–≤')
    update_state(message, DEFAULT)


@bot.callback_query_handler(func=lambda call: True)
def inline_buttons(call):
    if call.message:
        if call.data == 'send_money':
            message_to_send_money(call.message)
        if call.data == 'play_minigame':
            run_minigame(call.message)
        if call.data == 'exit_minigame':
            user = User.objects.get(user_id=call.message.chat.id)
            user.minigame_random_list = []
            user.minigame_number = ''
            user.save()
            bot.delete_message(chat_id=call.message.chat.id,
                               message_id=call.message.message_id)
            bot.send_message(call.message.chat.id,
                             text='üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã', reply_markup=keyboard_1)
        if 'game_number' in call.data:
            user = User.objects.get(user_id=call.message.chat.id)
            user_message_number = call.data.split('-')[1]
            list_of_user_numbers = re.findall(r'\d\d', user.minigame_number)
            if user_message_number in list_of_user_numbers:
                bot.answer_callback_query(
                    call.id, show_alert=False, text='‚ùå–í—ã —É–∂–µ –≤–∑—è–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ')
                return
            user.minigame_number = str(
                user.minigame_number) + user_message_number
            user.save()
            bot.answer_callback_query(call.id)
            if len(user.minigame_number) < 8:
                user_in_game_process(call.message)
            else:
                minigame_final(call.message)
            # start_minigame(call.message)


# def start_minigame(message):
#     user = User.objects.get(user_id=message.chat.id)
    # if user.minigame_counter_date != datetime.date.today():
    #         user.minigame_counter_date = datetime.date.today()
    #         user.minigame_counter = 0
    #         user.save()

#     if user.minigame_counter < 3:
#         number = str(random.randint(1000000, 99999999))
#         number_to_user = numbers_emojify(number)
#         user.minigame_counter = user.minigame_counter + 1
#         user.minigame_number = int(number)
#         user.save()
#         bot.send_message(
#             message.chat.id, f'–í–∞—à–µ —á–∏—Å–ª–æ\n\n - {number_to_user}', reply_markup=minigame_keyboard)
#         update_state(message, MINIGAMEFINAL)
#     else:
        # bot.send_message(
        #     message.chat.id, '–í—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è', reply_markup=keyboard_1)
        # update_state(message, DEFAULT)


# @bot.message_handler(content_types=['text'], func=lambda message: get_state(message) == MINIGAMEFINAL)
